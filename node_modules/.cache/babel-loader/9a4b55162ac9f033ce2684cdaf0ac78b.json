{"ast":null,"code":"import _slicedToArray from \"/home/odin/Desktop/pubg--tracker/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/odin/Desktop/pubg--tracker/src/views/Leaderboards.js\";\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Navigator from '../components/NavigatorSolid';\nimport Footer from '../components/Footer';\nimport { Container, View, PlayerHeader, PlayerName, ModeSelector, ModeOption, PlayerStats, PlayerHistory } from './LeaderboardsStyles';\nexport default function Leaderboards(props) {\n  let gameMode = props.match.params.game_mode;\n\n  let _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      leaderboards = _useState2[0],\n      setLeaderboards = _useState2[1];\n\n  let _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loaded = _useState4[0],\n      setLoaded = _useState4[1];\n\n  const handleClick = path => {\n    props.history.push(\"/leaderboards/\".concat(path));\n  };\n\n  useEffect(() => {\n    setLoaded(false);\n\n    (async () => {\n      try {\n        const res = await axios.post('http://localhost:5000/api/leaderboards', {\n          game_mode: gameMode\n        });\n        console.log(res.data);\n        setLeaderboards(res.data);\n        setLoaded(true);\n      } catch (err) {\n        setLoaded(true);\n      }\n    })(); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [gameMode]);\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(Navigator, {\n    handleClick: handleClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }), React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, loaded ? React.createElement(React.Fragment, null, React.createElement(PlayerHeader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(PlayerName, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Leaderboards\"), React.createElement(ModeSelector, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(ModeOption, {\n    active: gameMode === 'solo',\n    onClick: () => handleGamemodeChange('solo'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"SOLO\"), React.createElement(ModeOption, {\n    active: gameMode === 'solo-fpp',\n    onClick: () => handleGamemodeChange('solo-fpp'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"SOLO FPP\"), React.createElement(ModeOption, {\n    active: gameMode === 'duo',\n    onClick: () => handleGamemodeChange('duo'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"DUO\"), React.createElement(ModeOption, {\n    active: gameMode === 'duo-fpp',\n    onClick: () => handleGamemodeChange('duo-fpp'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"DUO FPP\"), React.createElement(ModeOption, {\n    active: gameMode === 'squad',\n    onClick: () => handleGamemodeChange('squad'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"SQUAD\"), React.createElement(ModeOption, {\n    active: gameMode === 'squad-fpp',\n    onClick: () => handleGamemodeChange('squad-fpp'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"SQUAD FPP\"))), React.createElement(PlayerStats, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, stats.map(stat => React.createElement(PlayerHistory, {\n    key: Math.random(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, stat), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, user.stats.attributes.gameModeStats[gamemode][stat]))))) : React.createElement(\"div\", {\n    className: \"loading\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  })), React.createElement(Footer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/home/odin/Desktop/pubg--tracker/src/views/Leaderboards.js"],"names":["React","useEffect","useState","axios","Navigator","Footer","Container","View","PlayerHeader","PlayerName","ModeSelector","ModeOption","PlayerStats","PlayerHistory","Leaderboards","props","gameMode","match","params","game_mode","leaderboards","setLeaderboards","loaded","setLoaded","handleClick","path","history","push","res","post","console","log","data","err","handleGamemodeChange","stats","map","stat","Math","random","user","attributes","gameModeStats","gamemode"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\n\nimport Navigator from '../components/NavigatorSolid'\nimport Footer from '../components/Footer'\nimport {\n  Container,\n  View,\n  PlayerHeader,\n  PlayerName,\n  ModeSelector,\n  ModeOption,\n  PlayerStats,\n  PlayerHistory\n} from './LeaderboardsStyles'\n\nexport default function Leaderboards(props) {\n  let gameMode = props.match.params.game_mode\n  let [leaderboards, setLeaderboards] = useState([])\n  let [loaded, setLoaded] = useState(false)\n  \n  const handleClick = path => {\n    props.history.push(`/leaderboards/${path}`)\n  }\n\n  useEffect(() => {\n    setLoaded(false)\n    ;(async () => {\n      try {\n        const res = await axios.post('http://localhost:5000/api/leaderboards', {\n          game_mode: gameMode\n        })\n        console.log(res.data)\n        setLeaderboards(res.data)\n        setLoaded(true)\n      } catch (err) {\n        setLoaded(true)\n      }\n    })()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [gameMode])\n\n  return (\n    <Container>\n      <Navigator handleClick={handleClick}/>\n      <View>\n        {loaded ? (\n          <>\n            <PlayerHeader>\n            <PlayerName>Leaderboards</PlayerName>\n            <ModeSelector>\n              <ModeOption\n                active={gameMode === 'solo'}\n                onClick={() => handleGamemodeChange('solo')}>\n                SOLO\n              </ModeOption>\n              <ModeOption\n                active={gameMode === 'solo-fpp'}\n                onClick={() => handleGamemodeChange('solo-fpp')}>\n                SOLO FPP\n              </ModeOption>\n              <ModeOption\n                active={gameMode === 'duo'}\n                onClick={() => handleGamemodeChange('duo')}>\n                DUO\n              </ModeOption>\n              <ModeOption\n                active={gameMode === 'duo-fpp'}\n                onClick={() => handleGamemodeChange('duo-fpp')}>\n                DUO FPP\n              </ModeOption>\n              <ModeOption\n                active={gameMode === 'squad'}\n                onClick={() => handleGamemodeChange('squad')}>\n                SQUAD\n              </ModeOption>\n              <ModeOption\n                active={gameMode === 'squad-fpp'}\n                onClick={() => handleGamemodeChange('squad-fpp')}>\n                SQUAD FPP\n              </ModeOption>\n            </ModeSelector>\n          </PlayerHeader>\n          <PlayerStats>\n            {stats.map(stat => (\n              <PlayerHistory key={Math.random()}>\n                <span>{stat}</span>\n                <span>\n                  {user.stats.attributes.gameModeStats[gamemode][stat]}\n                </span>\n              </PlayerHistory>\n            ))}\n          </PlayerStats>\n        </>\n        ) : <div className=\"loading\"></div>}\n      </View>\n      <Footer />\n    </Container>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}